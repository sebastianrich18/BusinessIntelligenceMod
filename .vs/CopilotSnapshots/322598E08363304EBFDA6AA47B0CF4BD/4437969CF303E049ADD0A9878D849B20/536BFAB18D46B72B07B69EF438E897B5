// Business Intelligence Mod for Schedule I
// Copyright (c) 2025 [Your Name]
// Licensed under the MIT License - see LICENSE file for details

using System;
using System.Collections.Generic;
using System.IO;
using MelonLoader;
using HarmonyLib;
using UnityEngine;
using ScheduleOne.Economy;
using ScheduleOne.Quests;
using ScheduleOne.ItemFramework;
using ScheduleOne.Product;
using ScheduleOne.UI.Handover;
using Harmony;

namespace BusinessIntelligenceMod
{
    public class BusinessIntelligenceMod : MelonMod
    {
        public static readonly string ModDataPath = Path.Combine(Application.persistentDataPath, "BusinessIntelligence");
        public static BusinessIntelligenceMod Instance { get; private set; }

        // Single tracking list for simplicity in the starter version
        private List<string> salesLog = new List<string>();

        public override void OnApplicationStart()
        {
            Instance = this;

            try
            {
                // Create data directory
                Directory.CreateDirectory(ModDataPath);

                // Apply Harmony patches
                HarmonyLib.Harmony harmony = new HarmonyLib.Harmony("com.yourusername.businessintelligence");

                // Log all customer methods to help with debugging
                LogCustomerMethods();

                // Just patch the most critical method for tracking sales
                var customerType = typeof(Customer);
                var processHandoverOriginal = AccessTools.Method(customerType, "ProcessHandoverServerSide");

                if (processHandoverOriginal != null)
                {
                    MelonLogger.Msg($"Found ProcessHandoverServerSide method: {processHandoverOriginal.Name} with {processHandoverOriginal.GetParameters().Length} parameters");

                    var processHandoverPostfix = AccessTools.Method(typeof(BusinessIntelligenceMod), nameof(ProcessHandoverServerSide_Postfix));
                    harmony.Patch(processHandoverOriginal, postfix: new HarmonyMethod(processHandoverPostfix));
                    MelonLogger.Msg("Successfully patched ProcessHandoverServerSide");
                }
                else
                {
                    MelonLogger.Error("Failed to find ProcessHandoverServerSide method");
                }

                MelonLogger.Msg("Business Intelligence Mod initialized!");
                MelonLogger.Msg($"Data will be saved to: {ModDataPath}");
            }
            catch (Exception ex)
            {
                MelonLogger.Error($"Error during initialization: {ex}");
            }
        }

        private void LogCustomerMethods()
        {
            try
            {
                // Log all public methods of Customer class to help with debugging
                var methods = typeof(Customer).GetMethods(System.Reflection.BindingFlags.Public |
                                                       System.Reflection.BindingFlags.NonPublic |
                                                       System.Reflection.BindingFlags.Instance);

                string methodsFile = Path.Combine(ModDataPath, "customer_methods.txt");
                using (StreamWriter writer = new StreamWriter(methodsFile))
                {
                    writer.WriteLine("Customer Class Methods:");
                    foreach (var method in methods)
                    {
                        writer.WriteLine($"Method: {method.Name}");
                        writer.WriteLine($"  Return Type: {method.ReturnType.Name}");
                        writer.WriteLine($"  Parameters:");
                        foreach (var param in method.GetParameters())
                        {
                            writer.WriteLine($"    {param.ParameterType.Name} {param.Name}");
                        }
                        writer.WriteLine();
                    }
                }

                MelonLogger.Msg($"Logged Customer methods to {methodsFile}");
            }
            catch (Exception ex)
            {
                MelonLogger.Error($"Error logging Customer methods: {ex}");
            }
        }

        public override void OnApplicationQuit()
        {
            // Save data on exit
            try
            {
                string salesPath = Path.Combine(ModDataPath, $"sales_log_{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.csv");
                File.WriteAllLines(salesPath, salesLog);
                MelonLogger.Msg($"Saved sales log to {salesPath}");
            }
            catch (Exception ex)
            {
                MelonLogger.Error($"Error saving sales log: {ex}");
            }
        }

        // Single harmony patch for initial testing
        public static void ProcessHandoverServerSide_Postfix(Customer __instance, object outcome,
                                                            List<ItemInstance> items, bool handoverByPlayer,
                                                            float totalPayment, object productList,
                                                            float satisfaction, object dealer)
        {
            try
            {
                MelonLogger.Msg("ProcessHandoverServerSide_Postfix executed!");

                string customerName = "Unknown";
                if (__instance != null && __instance.NPC != null)
                {
                    customerName = __instance.NPC.fullName;
                }

                string itemsInfo = "Items: ";
                if (items != null)
                {
                    foreach (var item in items)
                    {
                        itemsInfo += $"{item.ID} x{item.Quantity}, ";
                    }
                }

                string logEntry = $"{DateTime.Now},{customerName},{totalPayment},{satisfaction},{itemsInfo}";
                Instance.salesLog.Add(logEntry);

                MelonLogger.Msg($"Tracked sale: {logEntry}");

                // Immediately save for testing
                string salesPath = Path.Combine(ModDataPath, $"sales_log_latest.csv");
                File.AppendAllText(salesPath, logEntry + Environment.NewLine);
            }
            catch (Exception ex)
            {
                MelonLogger.Error($"Error in ProcessHandoverServerSide_Postfix: {ex}");
            }
        }
    }
}